; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	D:\Workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\ZLib\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
EXTRN	_wcstombs:PROC
EXTRN	_open:PROC
EXTRN	_malloc:PROC
EXTRN	_free:PROC
EXTRN	__wopen:PROC
EXTRN	__lseeki64:PROC
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@ DB '<fd:%d>', 00H ; `string'
PUBLIC	_gz_error
PUBLIC	_gzclearerr@4
PUBLIC	_gzerror@8
PUBLIC	_gzeof@4
PUBLIC	_gzoffset@4
PUBLIC	_gzoffset64@4
PUBLIC	_gztell@4
PUBLIC	_gztell64@4
PUBLIC	_gzseek@12
PUBLIC	_gzseek64@16
PUBLIC	_gzrewind@4
PUBLIC	_gzbuffer@8
PUBLIC	_gzopen_w@8
PUBLIC	_gzdopen@8
PUBLIC	_gzopen@8
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00003	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	75 15		 jne	 SHORT $LN1@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  00012	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 81   :         state->past = 0;            /* have not read past end yet */

  00019	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 82   :         state->how = LOOK;          /* look for gzip header */

  00020	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN1@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00027	6a 00		 push	 0
  00029	33 d2		 xor	 edx, edx
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	e8 00 00 00 00	 call	 _gz_error
  00037	83 c4 04	 add	 esp, 4

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  0003a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00048	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0004f	5e		 pop	 esi

; 88   : }

  00050	c3		 ret	 0
_gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gz_open
_TEXT	SEGMENT
_exclusive$1$ = -8					; size = 4
_path$1$ = -4						; size = 4
_mode$ = 8						; size = 4
_gz_open PROC						; COMDAT
; _path$ = ecx
; _fd$ = edx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 96   :     gz_statep state;
; 97   :     size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  0000a	33 c0		 xor	 eax, eax
  0000c	89 7d fc	 mov	 DWORD PTR _path$1$[ebp], edi
  0000f	8b da		 mov	 ebx, edx
  00011	89 45 f8	 mov	 DWORD PTR _exclusive$1$[ebp], eax

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  00014	85 ff		 test	 edi, edi
  00016	75 06		 jne	 SHORT $LN35@gz_open
  00018	5f		 pop	 edi
  00019	5b		 pop	 ebx

; 259  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN35@gz_open:
  0001e	56		 push	 esi

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = malloc(sizeof(gz_state));

  0001f	68 a0 00 00 00	 push	 160			; 000000a0H
  00024	e8 00 00 00 00	 call	 _malloc
  00029	8b f0		 mov	 esi, eax
  0002b	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  0002e	85 f6		 test	 esi, esi
  00030	0f 84 de 01 00
	00		 je	 $LN57@gz_open

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _mode$[ebp]
  00039	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00040	c7 46 20 00 20
	00 00		 mov	 DWORD PTR [esi+32], 8192 ; 00002000H
  00047	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0004e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00055	c7 46 48 ff ff
	ff ff		 mov	 DWORD PTR [esi+72], -1
  0005c	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00063	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0006a	8a 01		 mov	 al, BYTE PTR [ecx]
  0006c	84 c0		 test	 al, al
  0006e	0f 84 86 00 00
	00		 je	 $LN52@gz_open
$LL33@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00074	3c 30		 cmp	 al, 48			; 00000030H
  00076	7c 0f		 jl	 SHORT $LN31@gz_open
  00078	3c 39		 cmp	 al, 57			; 00000039H
  0007a	7f 0b		 jg	 SHORT $LN31@gz_open

; 125  :             state->level = *mode - '0';

  0007c	0f be c0	 movsx	 eax, al
  0007f	83 e8 30	 sub	 eax, 48			; 00000030H
  00082	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 126  :         else

  00085	eb 67		 jmp	 SHORT $LN16@gz_open
$LN31@gz_open:

; 127  :             switch (*mode) {

  00087	0f be c0	 movsx	 eax, al
  0008a	83 c0 d5	 add	 eax, -43		; ffffffd5H
  0008d	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  00090	77 5c		 ja	 SHORT $LN16@gz_open
  00092	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN53@gz_open[eax]
  00099	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN60@gz_open[eax*4]
$LN27@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  000a0	c7 46 10 4f 1c
	00 00		 mov	 DWORD PTR [esi+16], 7247 ; 00001c4fH

; 130  :                 break;

  000a7	eb 45		 jmp	 SHORT $LN16@gz_open
$LN26@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  000a9	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H

; 134  :                 break;

  000b0	eb 3c		 jmp	 SHORT $LN16@gz_open
$LN25@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000b2	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 137  :                 break;

  000b9	eb 33		 jmp	 SHORT $LN16@gz_open
$LN22@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000bb	b8 01 00 00 00	 mov	 eax, 1
  000c0	89 45 f8	 mov	 DWORD PTR _exclusive$1$[ebp], eax

; 152  :                 break;

  000c3	eb 29		 jmp	 SHORT $LN16@gz_open
$LN21@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000c5	c7 46 4c 01 00
	00 00		 mov	 DWORD PTR [esi+76], 1

; 156  :                 break;

  000cc	eb 20		 jmp	 SHORT $LN16@gz_open
$LN20@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000ce	c7 46 4c 02 00
	00 00		 mov	 DWORD PTR [esi+76], 2

; 159  :                 break;

  000d5	eb 17		 jmp	 SHORT $LN16@gz_open
$LN19@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000d7	c7 46 4c 03 00
	00 00		 mov	 DWORD PTR [esi+76], 3

; 162  :                 break;

  000de	eb 0e		 jmp	 SHORT $LN16@gz_open
$LN18@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000e0	c7 46 4c 04 00
	00 00		 mov	 DWORD PTR [esi+76], 4
$LN17@gz_open:

; 165  :             case 'T':
; 166  :                 state->direct = 1;

  000e7	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN16@gz_open:

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000ee	8a 41 01	 mov	 al, BYTE PTR [ecx+1]

; 167  :             default:        /* could consider as an error, but just ignore */
; 168  :                 ;
; 169  :             }
; 170  :         mode++;

  000f1	41		 inc	 ecx
  000f2	84 c0		 test	 al, al
  000f4	0f 85 7a ff ff
	ff		 jne	 $LL33@gz_open
$LN52@gz_open:

; 171  :     }
; 172  : 
; 173  :     /* must provide an "r", "w", or "a" */
; 174  :     if (state->mode == GZ_NONE) {

  000fa	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000fd	85 c0		 test	 eax, eax
  000ff	74 52		 je	 SHORT $LN58@gz_open

; 175  :         free(state);
; 176  :         return NULL;
; 177  :     }
; 178  : 
; 179  :     /* can't force transparent read */
; 180  :     if (state->mode == GZ_READ) {

  00101	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00106	75 0d		 jne	 SHORT $LN14@gz_open

; 181  :         if (state->direct) {

  00108	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0010c	75 45		 jne	 SHORT $LN58@gz_open

; 182  :             free(state);
; 183  :             return NULL;
; 184  :         }
; 185  :         state->direct = 1;      /* for empty file */

  0010e	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN14@gz_open:

; 186  :     }
; 187  : 
; 188  :     /* save the path name for error messages */
; 189  : #ifdef _WIN32
; 190  :     if (fd == -2) {

  00115	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00118	75 18		 jne	 SHORT $LN12@gz_open

; 191  :         len = wcstombs(NULL, path, 0);

  0011a	6a 00		 push	 0
  0011c	57		 push	 edi
  0011d	6a 00		 push	 0
  0011f	e8 00 00 00 00	 call	 _wcstombs
  00124	8b f8		 mov	 edi, eax
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH

; 192  :         if (len == (size_t)-1)

  00129	83 ff ff	 cmp	 edi, -1
  0012c	75 10		 jne	 SHORT $LN10@gz_open

; 193  :             len = 0;

  0012e	33 ff		 xor	 edi, edi

; 194  :     }
; 195  :     else

  00130	eb 0c		 jmp	 SHORT $LN10@gz_open
$LN12@gz_open:

; 196  : #endif
; 197  :         len = strlen(path);

  00132	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL54@gz_open:
  00135	8a 07		 mov	 al, BYTE PTR [edi]
  00137	47		 inc	 edi
  00138	84 c0		 test	 al, al
  0013a	75 f9		 jne	 SHORT $LL54@gz_open
  0013c	2b f9		 sub	 edi, ecx
$LN10@gz_open:

; 198  :     state->path = malloc(len + 1);

  0013e	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _malloc
  00147	8b c8		 mov	 ecx, eax
  00149	83 c4 04	 add	 esp, 4
  0014c	89 4e 18	 mov	 DWORD PTR [esi+24], ecx

; 199  :     if (state->path == NULL) {

  0014f	85 c9		 test	 ecx, ecx
  00151	75 12		 jne	 SHORT $LN9@gz_open
$LN58@gz_open:

; 200  :         free(state);

  00153	56		 push	 esi
  00154	e8 00 00 00 00	 call	 _free
  00159	83 c4 04	 add	 esp, 4

; 201  :         return NULL;

  0015c	33 c0		 xor	 eax, eax
  0015e	5e		 pop	 esi
  0015f	5f		 pop	 edi
  00160	5b		 pop	 ebx

; 259  : }

  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c3		 ret	 0
$LN9@gz_open:

; 202  :     }
; 203  : #ifdef _WIN32
; 204  :     if (fd == -2)

  00165	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00168	75 1f		 jne	 SHORT $LN8@gz_open

; 205  :         if (len)

  0016a	85 ff		 test	 edi, edi
  0016c	74 13		 je	 SHORT $LN7@gz_open

; 206  :             wcstombs(state->path, path, len + 1);

  0016e	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00171	8b 7d fc	 mov	 edi, DWORD PTR _path$1$[ebp]
  00174	50		 push	 eax
  00175	57		 push	 edi
  00176	51		 push	 ecx
  00177	e8 00 00 00 00	 call	 _wcstombs
  0017c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  :         else

  0017f	eb 1d		 jmp	 SHORT $LN5@gz_open
$LN7@gz_open:

; 208  :             *(state->path) = 0;
; 209  :     else

  00181	8b 7d fc	 mov	 edi, DWORD PTR _path$1$[ebp]
  00184	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00187	eb 15		 jmp	 SHORT $LN5@gz_open
$LN8@gz_open:

; 210  : #endif
; 211  :         strcpy(state->path, path);

  00189	8b 7d fc	 mov	 edi, DWORD PTR _path$1$[ebp]
  0018c	8b d7		 mov	 edx, edi
  0018e	8b ff		 npad	 2
$LL38@gz_open:
  00190	8a 02		 mov	 al, BYTE PTR [edx]
  00192	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00195	88 01		 mov	 BYTE PTR [ecx], al
  00197	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0019a	84 c0		 test	 al, al
  0019c	75 f2		 jne	 SHORT $LL38@gz_open
$LN5@gz_open:

; 212  : 
; 213  :     /* compute the flags for open() */
; 214  :     oflag =
; 215  : #ifdef O_LARGEFILE
; 216  :         O_LARGEFILE |
; 217  : #endif
; 218  : #ifdef O_BINARY
; 219  :         O_BINARY |
; 220  : #endif
; 221  : #ifdef O_CLOEXEC
; 222  :         (cloexec ? O_CLOEXEC : 0) |
; 223  : #endif
; 224  :         (state->mode == GZ_READ ?
; 225  :          O_RDONLY :
; 226  :          (O_WRONLY | O_CREAT |
; 227  : #ifdef O_EXCL
; 228  :           (exclusive ? O_EXCL : 0) |
; 229  : #endif
; 230  :           (state->mode == GZ_WRITE ?
; 231  :            O_TRUNC :
; 232  :            O_APPEND)));

  0019e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  001a1	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  001a7	75 04		 jne	 SHORT $LN39@gz_open
  001a9	33 c0		 xor	 eax, eax
  001ab	eb 27		 jmp	 SHORT $LN40@gz_open
$LN39@gz_open:
  001ad	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  001b3	b8 08 00 00 00	 mov	 eax, 8
  001b8	8b 4d f8	 mov	 ecx, DWORD PTR _exclusive$1$[ebp]
  001bb	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001c0	0f 44 c2	 cmove	 eax, edx
  001c3	f7 d9		 neg	 ecx
  001c5	1b c9		 sbb	 ecx, ecx
  001c7	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  001cd	0b c1		 or	 eax, ecx
  001cf	0d 01 01 00 00	 or	 eax, 257		; 00000101H
$LN40@gz_open:
  001d4	0d 00 80 00 00	 or	 eax, 32768		; 00008000H

; 233  : 
; 234  :     /* open the file with the appropriate flags (or just use fd) */
; 235  :     state->fd = fd > -1 ? fd : (
; 236  : #ifdef _WIN32
; 237  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 238  : #endif
; 239  :         open(path, oflag, 0666));

  001d9	83 fb ff	 cmp	 ebx, -1
  001dc	7f 1d		 jg	 SHORT $LN42@gz_open
  001de	68 b6 01 00 00	 push	 438			; 000001b6H
  001e3	50		 push	 eax
  001e4	57		 push	 edi
  001e5	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  001e8	75 07		 jne	 SHORT $LN41@gz_open
  001ea	e8 00 00 00 00	 call	 __wopen
  001ef	eb 05		 jmp	 SHORT $LN56@gz_open
$LN41@gz_open:
  001f1	e8 00 00 00 00	 call	 _open
$LN56@gz_open:
  001f6	8b d8		 mov	 ebx, eax
  001f8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN42@gz_open:
  001fb	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 240  :     if (state->fd == -1) {

  001fe	83 fb ff	 cmp	 ebx, -1
  00201	75 1a		 jne	 SHORT $LN4@gz_open

; 241  :         free(state->path);

  00203	ff 76 18	 push	 DWORD PTR [esi+24]
  00206	e8 00 00 00 00	 call	 _free

; 242  :         free(state);

  0020b	56		 push	 esi
  0020c	e8 00 00 00 00	 call	 _free
  00211	83 c4 08	 add	 esp, 8
$LN57@gz_open:

; 243  :         return NULL;

  00214	5e		 pop	 esi
  00215	5f		 pop	 edi
  00216	33 c0		 xor	 eax, eax
  00218	5b		 pop	 ebx

; 259  : }

  00219	8b e5		 mov	 esp, ebp
  0021b	5d		 pop	 ebp
  0021c	c3		 ret	 0
$LN4@gz_open:

; 244  :     }
; 245  :     if (state->mode == GZ_APPEND)

  0021d	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  00221	75 07		 jne	 SHORT $LN3@gz_open

; 246  :         state->mode = GZ_WRITE;         /* simplify later checks */

  00223	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H
$LN3@gz_open:

; 247  : 
; 248  :     /* save the current position for rewinding (only if reading) */
; 249  :     if (state->mode == GZ_READ) {

  0022a	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00231	75 2a		 jne	 SHORT $LN1@gz_open

; 250  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  00233	6a 01		 push	 1
  00235	6a 00		 push	 0
  00237	6a 00		 push	 0
  00239	53		 push	 ebx
  0023a	e8 00 00 00 00	 call	 __lseeki64
  0023f	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00242	83 c4 10	 add	 esp, 16			; 00000010H

; 251  :         if (state->start == -1) state->start = 0;

  00245	23 c2		 and	 eax, edx
  00247	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  0024a	83 f8 ff	 cmp	 eax, -1
  0024d	75 0e		 jne	 SHORT $LN1@gz_open
  0024f	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00256	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN1@gz_open:

; 252  :     }
; 253  : 
; 254  :     /* initialize stream */
; 255  :     gz_reset(state);

  0025d	8b ce		 mov	 ecx, esi
  0025f	e8 00 00 00 00	 call	 _gz_reset

; 256  : 
; 257  :     /* return stream */
; 258  :     return (gzFile)state;

  00264	8b c6		 mov	 eax, esi
  00266	5e		 pop	 esi
  00267	5f		 pop	 edi
  00268	5b		 pop	 ebx

; 259  : }

  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
  0026d	8d 49 00	 npad	 3
$LN60@gz_open:
  00270	00 00 00 00	 DD	 $LN58@gz_open
  00274	00 00 00 00	 DD	 $LN18@gz_open
  00278	00 00 00 00	 DD	 $LN19@gz_open
  0027c	00 00 00 00	 DD	 $LN17@gz_open
  00280	00 00 00 00	 DD	 $LN25@gz_open
  00284	00 00 00 00	 DD	 $LN21@gz_open
  00288	00 00 00 00	 DD	 $LN20@gz_open
  0028c	00 00 00 00	 DD	 $LN27@gz_open
  00290	00 00 00 00	 DD	 $LN26@gz_open
  00294	00 00 00 00	 DD	 $LN22@gz_open
  00298	00 00 00 00	 DD	 $LN16@gz_open
$LN53@gz_open:
  0029c	00		 DB	 0
  0029d	0a		 DB	 10			; 0000000aH
  0029e	0a		 DB	 10			; 0000000aH
  0029f	0a		 DB	 10			; 0000000aH
  002a0	0a		 DB	 10			; 0000000aH
  002a1	0a		 DB	 10			; 0000000aH
  002a2	0a		 DB	 10			; 0000000aH
  002a3	0a		 DB	 10			; 0000000aH
  002a4	0a		 DB	 10			; 0000000aH
  002a5	0a		 DB	 10			; 0000000aH
  002a6	0a		 DB	 10			; 0000000aH
  002a7	0a		 DB	 10			; 0000000aH
  002a8	0a		 DB	 10			; 0000000aH
  002a9	0a		 DB	 10			; 0000000aH
  002aa	0a		 DB	 10			; 0000000aH
  002ab	0a		 DB	 10			; 0000000aH
  002ac	0a		 DB	 10			; 0000000aH
  002ad	0a		 DB	 10			; 0000000aH
  002ae	0a		 DB	 10			; 0000000aH
  002af	0a		 DB	 10			; 0000000aH
  002b0	0a		 DB	 10			; 0000000aH
  002b1	0a		 DB	 10			; 0000000aH
  002b2	0a		 DB	 10			; 0000000aH
  002b3	0a		 DB	 10			; 0000000aH
  002b4	0a		 DB	 10			; 0000000aH
  002b5	0a		 DB	 10			; 0000000aH
  002b6	0a		 DB	 10			; 0000000aH
  002b7	01		 DB	 1
  002b8	0a		 DB	 10			; 0000000aH
  002b9	0a		 DB	 10			; 0000000aH
  002ba	0a		 DB	 10			; 0000000aH
  002bb	0a		 DB	 10			; 0000000aH
  002bc	0a		 DB	 10			; 0000000aH
  002bd	0a		 DB	 10			; 0000000aH
  002be	0a		 DB	 10			; 0000000aH
  002bf	0a		 DB	 10			; 0000000aH
  002c0	0a		 DB	 10			; 0000000aH
  002c1	0a		 DB	 10			; 0000000aH
  002c2	0a		 DB	 10			; 0000000aH
  002c3	02		 DB	 2
  002c4	0a		 DB	 10			; 0000000aH
  002c5	03		 DB	 3
  002c6	0a		 DB	 10			; 0000000aH
  002c7	0a		 DB	 10			; 0000000aH
  002c8	0a		 DB	 10			; 0000000aH
  002c9	0a		 DB	 10			; 0000000aH
  002ca	0a		 DB	 10			; 0000000aH
  002cb	0a		 DB	 10			; 0000000aH
  002cc	0a		 DB	 10			; 0000000aH
  002cd	0a		 DB	 10			; 0000000aH
  002ce	0a		 DB	 10			; 0000000aH
  002cf	0a		 DB	 10			; 0000000aH
  002d0	0a		 DB	 10			; 0000000aH
  002d1	0a		 DB	 10			; 0000000aH
  002d2	04		 DB	 4
  002d3	0a		 DB	 10			; 0000000aH
  002d4	0a		 DB	 10			; 0000000aH
  002d5	0a		 DB	 10			; 0000000aH
  002d6	0a		 DB	 10			; 0000000aH
  002d7	05		 DB	 5
  002d8	0a		 DB	 10			; 0000000aH
  002d9	06		 DB	 6
  002da	0a		 DB	 10			; 0000000aH
  002db	0a		 DB	 10			; 0000000aH
  002dc	0a		 DB	 10			; 0000000aH
  002dd	0a		 DB	 10			; 0000000aH
  002de	0a		 DB	 10			; 0000000aH
  002df	0a		 DB	 10			; 0000000aH
  002e0	0a		 DB	 10			; 0000000aH
  002e1	0a		 DB	 10			; 0000000aH
  002e2	0a		 DB	 10			; 0000000aH
  002e3	07		 DB	 7
  002e4	0a		 DB	 10			; 0000000aH
  002e5	0a		 DB	 10			; 0000000aH
  002e6	0a		 DB	 10			; 0000000aH
  002e7	0a		 DB	 10			; 0000000aH
  002e8	08		 DB	 8
  002e9	09		 DB	 9
_gz_open ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 266  :     return gz_open(path, -1, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	83 ca ff	 or	 edx, -1
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 04	 add	 esp, 4

; 267  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 282  :     char *path;         /* identifier for error messages */
; 283  :     gzFile gz;
; 284  : 
; 285  :     if (fd == -1 || (path = malloc(7 + 3 * sizeof(int))) == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _fd$[ebp]
  00007	57		 push	 edi
  00008	83 fe ff	 cmp	 esi, -1
  0000b	74 3b		 je	 SHORT $LN1@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	e8 00 00 00 00	 call	 _malloc
  00014	8b f8		 mov	 edi, eax
  00016	83 c4 04	 add	 esp, 4
  00019	85 ff		 test	 edi, edi
  0001b	74 2b		 je	 SHORT $LN1@gzdopen

; 287  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */

  0001d	56		 push	 esi
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
  00023	57		 push	 edi
  00024	e8 00 00 00 00	 call	 _sprintf

; 288  :     gz = gz_open(path, fd, mode);

  00029	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  0002c	8b d6		 mov	 edx, esi
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 _gz_open

; 289  :     free(path);

  00035	57		 push	 edi
  00036	8b f0		 mov	 esi, eax
  00038	e8 00 00 00 00	 call	 _free
  0003d	83 c4 14	 add	 esp, 20			; 00000014H

; 290  :     return gz;

  00040	8b c6		 mov	 eax, esi
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 291  : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN1@gzdopen:
  00048	5f		 pop	 edi

; 286  :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi

; 291  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzopen_w@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w@8 PROC					; COMDAT

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 299  :     return gz_open(path, -2, mode);

  00003	ff 75 0c	 push	 DWORD PTR _mode$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00009	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0000e	e8 00 00 00 00	 call	 _gz_open
  00013	83 c4 04	 add	 esp, 4

; 300  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
_gzopen_w@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  :     gz_statep state;
; 309  : 
; 310  :     /* get internal structure and check integrity */
; 311  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 07		 jne	 SHORT $LN4@gzbuffer
$LN7@gzbuffer:

; 312  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 326  : }

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
$LN4@gzbuffer:

; 313  :     state = (gz_statep)file;
; 314  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00011	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00014	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00019	74 07		 je	 SHORT $LN3@gzbuffer
  0001b	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00020	75 e8		 jne	 SHORT $LN7@gzbuffer
$LN3@gzbuffer:

; 315  :         return -1;
; 316  : 
; 317  :     /* make sure we haven't already allocated memory */
; 318  :     if (state->size != 0)

  00022	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
  00026	75 e2		 jne	 SHORT $LN7@gzbuffer

; 319  :         return -1;
; 320  : 
; 321  :     /* check and set requested size */
; 322  :     if (size < 2)

  00028	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002b	ba 02 00 00 00	 mov	 edx, 2
  00030	3b c2		 cmp	 eax, edx
  00032	0f 42 c2	 cmovb	 eax, edx

; 323  :         size = 2;               /* need two bytes to check magic header */
; 324  :     state->want = size;

  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 325  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 326  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 332  :     gz_statep state;
; 333  : 
; 334  :     /* get internal structure */
; 335  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi
  0000d	74 3f		 je	 SHORT $LN2@gzrewind

; 336  :         return -1;
; 337  :     state = (gz_statep)file;
; 338  : 
; 339  :     /* check that we're reading and that there's no error */
; 340  :     if (state->mode != GZ_READ ||
; 341  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 36		 jne	 SHORT $LN2@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 2a		 jne	 SHORT $LN2@gzrewind
$LN3@gzrewind:

; 343  : 
; 344  :     /* back up and start over */
; 345  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	6a 00		 push	 0
  00026	ff 76 3c	 push	 DWORD PTR [esi+60]
  00029	ff 76 38	 push	 DWORD PTR [esi+56]
  0002c	ff 76 14	 push	 DWORD PTR [esi+20]
  0002f	e8 00 00 00 00	 call	 __lseeki64
  00034	23 c2		 and	 eax, edx
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	83 f8 ff	 cmp	 eax, -1
  0003c	74 10		 je	 SHORT $LN2@gzrewind

; 346  :         return -1;
; 347  :     gz_reset(state);

  0003e	8b ce		 mov	 ecx, esi
  00040	e8 00 00 00 00	 call	 _gz_reset

; 348  :     return 0;

  00045	33 c0		 xor	 eax, eax

; 349  : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN2@gzrewind:

; 342  :         return -1;

  0004e	83 c8 ff	 or	 eax, -1

; 349  : }

  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
_gzrewind@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzseek64@16
_TEXT	SEGMENT
tv405 = 8						; size = 8
_offset$ = 8						; size = 8
_gzseek64@16 PROC					; COMDAT
; _file$ = ecx
; _whence$ = edx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 357  :     unsigned n;
; 358  :     z_off64_t ret;
; 359  :     gz_statep state;
; 360  : 
; 361  :     /* get internal structure and check integrity */
; 362  :     if (file == NULL)

  00009	85 f6		 test	 esi, esi
  0000b	75 0d		 jne	 SHORT $LN15@gzseek64
$LN26@gzseek64:

; 363  :         return -1;

  0000d	83 c8 ff	 or	 eax, -1
  00010	0b d0		 or	 edx, eax

; 426  : }

  00012	5f		 pop	 edi
  00013	5e		 pop	 esi
  00014	5b		 pop	 ebx
  00015	59		 pop	 ecx
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN15@gzseek64:

; 364  :     state = (gz_statep)file;
; 365  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0001a	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0001d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00023	74 08		 je	 SHORT $LN14@gzseek64
  00025	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0002b	75 e0		 jne	 SHORT $LN26@gzseek64
$LN14@gzseek64:

; 366  :         return -1;
; 367  : 
; 368  :     /* check that there's no error */
; 369  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  0002d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00030	85 c0		 test	 eax, eax
  00032	74 05		 je	 SHORT $LN13@gzseek64
  00034	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00037	75 d4		 jne	 SHORT $LN26@gzseek64
$LN13@gzseek64:

; 370  :         return -1;
; 371  : 
; 372  :     /* can only seek from start or relative to current position */
; 373  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00039	85 d2		 test	 edx, edx
  0003b	74 19		 je	 SHORT $LN20@gzseek64
  0003d	83 fa 01	 cmp	 edx, 1
  00040	75 cb		 jne	 SHORT $LN26@gzseek64

; 379  :     else if (state->seek)

  00042	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0

; 380  :         offset += state->skip;

  00046	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00049	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0004c	74 14		 je	 SHORT $LN9@gzseek64
  0004e	03 7e 50	 add	 edi, DWORD PTR [esi+80]
  00051	13 5e 54	 adc	 ebx, DWORD PTR [esi+84]
  00054	eb 0c		 jmp	 SHORT $LN9@gzseek64
$LN20@gzseek64:

; 374  :         return -1;
; 375  : 
; 376  :     /* normalize offset to a SEEK_CUR specification */
; 377  :     if (whence == SEEK_SET)
; 378  :         offset -= state->x.pos;

  00056	8b 7d 08	 mov	 edi, DWORD PTR _offset$[ebp]
  00059	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  0005c	8b 5d 0c	 mov	 ebx, DWORD PTR _offset$[ebp+4]
  0005f	1b 5e 0c	 sbb	 ebx, DWORD PTR [esi+12]
$LN9@gzseek64:

; 381  :     state->seek = 0;

  00062	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 382  : 
; 383  :     /* if within raw area while reading, just go there */
; 384  :     if (state->mode == GZ_READ && state->how == COPY &&
; 385  :             state->x.pos + offset >= 0) {

  00069	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  0006f	0f 85 82 00 00
	00		 jne	 $LN8@gzseek64
  00075	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  00079	75 7c		 jne	 SHORT $LN8@gzseek64
  0007b	8b d7		 mov	 edx, edi
  0007d	8b c3		 mov	 eax, ebx
  0007f	03 56 08	 add	 edx, DWORD PTR [esi+8]
  00082	13 46 0c	 adc	 eax, DWORD PTR [esi+12]
  00085	89 45 0c	 mov	 DWORD PTR tv405[ebp+4], eax
  00088	78 6d		 js	 SHORT $LN8@gzseek64
  0008a	7f 04		 jg	 SHORT $LN21@gzseek64
  0008c	85 d2		 test	 edx, edx
  0008e	72 67		 jb	 SHORT $LN8@gzseek64
$LN21@gzseek64:

; 386  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00090	8b cf		 mov	 ecx, edi
  00092	8b c3		 mov	 eax, ebx
  00094	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00096	6a 01		 push	 1
  00098	83 d8 00	 sbb	 eax, 0
  0009b	50		 push	 eax
  0009c	51		 push	 ecx
  0009d	ff 76 14	 push	 DWORD PTR [esi+20]
  000a0	e8 00 00 00 00	 call	 __lseeki64

; 387  :         if (ret == -1)

  000a5	23 c2		 and	 eax, edx
  000a7	83 c4 10	 add	 esp, 16			; 00000010H
  000aa	83 f8 ff	 cmp	 eax, -1
  000ad	0f 84 5a ff ff
	ff		 je	 $LN26@gzseek64

; 388  :             return -1;
; 389  :         state->x.have = 0;
; 390  :         state->eof = 0;
; 391  :         state->past = 0;
; 392  :         state->seek = 0;
; 393  :         gz_error(state, Z_OK, NULL);

  000b3	6a 00		 push	 0
  000b5	33 d2		 xor	 edx, edx
  000b7	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000bd	8b ce		 mov	 ecx, esi
  000bf	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  000c6	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000cd	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000d4	e8 00 00 00 00	 call	 _gz_error
  000d9	83 c4 04	 add	 esp, 4

; 394  :         state->strm.avail_in = 0;

  000dc	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 395  :         state->x.pos += offset;

  000e3	01 7e 08	 add	 DWORD PTR [esi+8], edi

; 396  :         return state->x.pos;

  000e6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000e9	11 5e 0c	 adc	 DWORD PTR [esi+12], ebx
  000ec	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 426  : }

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	59		 pop	 ecx
  000f3	5d		 pop	 ebp
  000f4	c2 08 00	 ret	 8
$LN8@gzseek64:

; 397  :     }
; 398  : 
; 399  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 400  :     if (offset < 0) {

  000f7	85 db		 test	 ebx, ebx
  000f9	7f 39		 jg	 SHORT $LN3@gzseek64
  000fb	7c 04		 jl	 SHORT $LN22@gzseek64
  000fd	85 ff		 test	 edi, edi
  000ff	73 33		 jae	 SHORT $LN3@gzseek64
$LN22@gzseek64:

; 401  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  00101	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00107	0f 85 00 ff ff
	ff		 jne	 $LN26@gzseek64

; 402  :             return -1;
; 403  :         offset += state->x.pos;

  0010d	03 7e 08	 add	 edi, DWORD PTR [esi+8]
  00110	13 5e 0c	 adc	 ebx, DWORD PTR [esi+12]

; 404  :         if (offset < 0)                     /* before start of file! */

  00113	85 db		 test	 ebx, ebx
  00115	7f 0e		 jg	 SHORT $LN4@gzseek64
  00117	0f 8c f0 fe ff
	ff		 jl	 $LN26@gzseek64
  0011d	85 ff		 test	 edi, edi
  0011f	0f 82 e8 fe ff
	ff		 jb	 $LN26@gzseek64
$LN4@gzseek64:

; 405  :             return -1;
; 406  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  00125	56		 push	 esi
  00126	e8 00 00 00 00	 call	 _gzrewind@4
  0012b	83 f8 ff	 cmp	 eax, -1
  0012e	0f 84 d9 fe ff
	ff		 je	 $LN26@gzseek64
$LN3@gzseek64:

; 407  :             return -1;
; 408  :     }
; 409  : 
; 410  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 411  :     if (state->mode == GZ_READ) {

  00134	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0013b	75 27		 jne	 SHORT $LN2@gzseek64

; 412  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?
; 413  :             (unsigned)offset : state->x.have;

  0013d	8b 06		 mov	 eax, DWORD PTR [esi]
  0013f	33 c9		 xor	 ecx, ecx
  00141	3b cb		 cmp	 ecx, ebx
  00143	7f 0a		 jg	 SHORT $LN18@gzseek64
  00145	7c 04		 jl	 SHORT $LN24@gzseek64
  00147	3b c7		 cmp	 eax, edi
  00149	77 04		 ja	 SHORT $LN18@gzseek64
$LN24@gzseek64:
  0014b	8b c8		 mov	 ecx, eax
  0014d	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  0014f	8b cf		 mov	 ecx, edi
$LN19@gzseek64:

; 414  :         state->x.have -= n;
; 415  :         state->x.next += n;

  00151	01 4e 04	 add	 DWORD PTR [esi+4], ecx
  00154	2b c1		 sub	 eax, ecx

; 416  :         state->x.pos += n;

  00156	01 4e 08	 add	 DWORD PTR [esi+8], ecx
  00159	89 06		 mov	 DWORD PTR [esi], eax
  0015b	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 417  :         offset -= n;

  0015f	2b f9		 sub	 edi, ecx
  00161	83 db 00	 sbb	 ebx, 0
$LN2@gzseek64:

; 418  :     }
; 419  : 
; 420  :     /* request skip (if not zero) */
; 421  :     if (offset) {

  00164	8b c7		 mov	 eax, edi
  00166	0b c3		 or	 eax, ebx
  00168	74 0d		 je	 SHORT $LN1@gzseek64

; 422  :         state->seek = 1;

  0016a	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1

; 423  :         state->skip = offset;

  00171	89 7e 50	 mov	 DWORD PTR [esi+80], edi
  00174	89 5e 54	 mov	 DWORD PTR [esi+84], ebx
$LN1@gzseek64:

; 424  :     }
; 425  :     return state->x.pos + offset;

  00177	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0017a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0017d	03 c7		 add	 eax, edi

; 426  : }

  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	13 d3		 adc	 edx, ebx
  00183	5b		 pop	 ebx
  00184	59		 pop	 ecx
  00185	5d		 pop	 ebp
  00186	c2 08 00	 ret	 8
_gzseek64@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 434  :     z_off64_t ret;
; 435  : 
; 436  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000d	99		 cdq
  0000e	56		 push	 esi
  0000f	52		 push	 edx
  00010	8b 55 10	 mov	 edx, DWORD PTR _whence$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64@16
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 437  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	3b c8		 cmp	 ecx, eax
  00020	75 0d		 jne	 SHORT $LN3@gzseek
  00022	3b f2		 cmp	 esi, edx
  00024	75 09		 jne	 SHORT $LN3@gzseek
  00026	8b c1		 mov	 eax, ecx

; 438  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN3@gzseek:

; 437  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0002f	83 c8 ff	 or	 eax, -1

; 438  : }

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gztell64@4
_TEXT	SEGMENT
tv73 = -8						; size = 8
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 444  :     gz_statep state;
; 445  : 
; 446  :     /* get internal structure and check integrity */
; 447  :     if (file == NULL)

  00006	85 c9		 test	 ecx, ecx
  00008	75 09		 jne	 SHORT $LN2@gztell64
$LN7@gztell64:

; 448  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1
  0000d	0b d0		 or	 edx, eax

; 455  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@gztell64:

; 449  :     state = (gz_statep)file;
; 450  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00013	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00016	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0001b	74 07		 je	 SHORT $LN1@gztell64
  0001d	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00022	75 e6		 jne	 SHORT $LN7@gztell64
$LN1@gztell64:

; 451  :         return -1;
; 452  : 
; 453  :     /* return position */
; 454  :     return state->x.pos + (state->seek ? state->skip : 0);

  00024	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  00028	56		 push	 esi
  00029	74 15		 je	 SHORT $LN5@gztell64
  0002b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0002e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00031	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  00034	03 c2		 add	 eax, edx
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	13 d6		 adc	 edx, esi
  0003b	5e		 pop	 esi

; 455  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@gztell64:

; 451  :         return -1;
; 452  : 
; 453  :     /* return position */
; 454  :     return state->x.pos + (state->seek ? state->skip : 0);

  00040	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	66 0f 13 45 f8	 movlpd	 QWORD PTR tv73[ebp], xmm0
  0004b	8b 55 f8	 mov	 edx, DWORD PTR tv73[ebp]
  0004e	03 c2		 add	 eax, edx
  00050	8b 75 fc	 mov	 esi, DWORD PTR tv73[ebp+4]
  00053	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00056	13 d6		 adc	 edx, esi
  00058	5e		 pop	 esi

; 455  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 460  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  :     z_off64_t ret;
; 462  : 
; 463  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64@4
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 464  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 0b		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 07		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx
  0001b	5e		 pop	 esi

; 465  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@gztell:

; 464  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 465  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = ecx

; 470  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 471  :     z_off64_t offset;
; 472  :     gz_statep state;
; 473  : 
; 474  :     /* get internal structure and check integrity */
; 475  :     if (file == NULL)

  00003	85 f6		 test	 esi, esi
  00005	75 07		 jne	 SHORT $LN4@gzoffset64
$LN7@gzoffset64:

; 476  :         return -1;

  00007	83 c8 ff	 or	 eax, -1
  0000a	0b d0		 or	 edx, eax

; 487  :     return offset;
; 488  : }

  0000c	5e		 pop	 esi
  0000d	c3		 ret	 0
$LN4@gzoffset64:

; 477  :     state = (gz_statep)file;
; 478  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00011	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00016	74 07		 je	 SHORT $LN3@gzoffset64
  00018	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001d	75 e8		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 479  :         return -1;
; 480  : 
; 481  :     /* compute and return effective offset in file */
; 482  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  0001f	6a 01		 push	 1
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	ff 76 14	 push	 DWORD PTR [esi+20]
  00028	e8 00 00 00 00	 call	 __lseeki64

; 483  :     if (offset == -1)

  0002d	8b c8		 mov	 ecx, eax
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
  00032	23 ca		 and	 ecx, edx
  00034	83 f9 ff	 cmp	 ecx, -1
  00037	74 ce		 je	 SHORT $LN7@gzoffset64

; 484  :         return -1;
; 485  :     if (state->mode == GZ_READ)             /* reading */

  00039	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00040	75 06		 jne	 SHORT $LN5@gzoffset64

; 486  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  00042	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  00045	83 da 00	 sbb	 edx, 0
$LN5@gzoffset64:

; 487  :     return offset;
; 488  : }

  00048	5e		 pop	 esi
  00049	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 494  :     z_off64_t ret;
; 495  : 
; 496  :     ret = gzoffset64(file);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _gzoffset64@4
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 497  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0d		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 09		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 498  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@gzoffset:

; 497  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00026	83 c8 ff	 or	 eax, -1

; 498  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 504  :     gz_statep state;
; 505  : 
; 506  :     /* get internal structure and check integrity */
; 507  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 22		 je	 SHORT $LN5@gzeof

; 508  :         return 0;
; 509  :     state = (gz_statep)file;
; 510  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00013	74 10		 je	 SHORT $LN8@gzeof
  00015	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H
  0001b	75 0f		 jne	 SHORT $LN5@gzeof

; 511  :         return 0;
; 512  : 
; 513  :     /* return end-of-file state */
; 514  :     return state->mode == GZ_READ ? state->past : 0;

  0001d	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00023	75 07		 jne	 SHORT $LN5@gzeof
$LN8@gzeof:
  00025	8b 40 44	 mov	 eax, DWORD PTR [eax+68]

; 515  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN5@gzeof:

; 511  :         return 0;
; 512  : 
; 513  :     /* return end-of-file state */
; 514  :     return state->mode == GZ_READ ? state->past : 0;

  0002c	33 c0		 xor	 eax, eax

; 515  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  :     gz_statep state;
; 523  : 
; 524  :     /* get internal structure and check integrity */
; 525  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN3@gzerror
$LN8@gzerror:

; 526  :         return NULL;

  0000a	33 c0		 xor	 eax, eax

; 535  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN3@gzerror:

; 527  :     state = (gz_statep)file;
; 528  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00010	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00013	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00018	74 07		 je	 SHORT $LN2@gzerror
  0001a	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001f	75 e9		 jne	 SHORT $LN8@gzerror
$LN2@gzerror:

; 529  :         return NULL;
; 530  : 
; 531  :     /* return error information */
; 532  :     if (errnum != NULL)

  00021	8b 55 0c	 mov	 edx, DWORD PTR _errnum$[ebp]
  00024	85 d2		 test	 edx, edx
  00026	74 05		 je	 SHORT $LN1@gzerror

; 533  :         *errnum = state->err;

  00028	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0002b	89 02		 mov	 DWORD PTR [edx], eax
$LN1@gzerror:

; 534  :     return state->msg == NULL ? "" : state->msg;

  0002d	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
  00030	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00035	85 c9		 test	 ecx, ecx
  00037	0f 45 c1	 cmovne	 eax, ecx

; 535  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  :     gz_statep state;
; 542  : 
; 543  :     /* get internal structure and check integrity */
; 544  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 32		 je	 SHORT $LN4@gzclearerr

; 545  :         return;
; 546  :     state = (gz_statep)file;
; 547  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 0e		 je	 SHORT $LN7@gzclearerr
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00019	75 21		 jne	 SHORT $LN4@gzclearerr

; 548  :         return;
; 549  : 
; 550  :     /* clear error and end-of-file */
; 551  :     if (state->mode == GZ_READ) {

  0001b	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00020	75 0e		 jne	 SHORT $LN1@gzclearerr
$LN7@gzclearerr:

; 552  :         state->eof = 0;

  00022	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 553  :         state->past = 0;

  00029	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
$LN1@gzclearerr:

; 554  :     }
; 555  :     gz_error(state, Z_OK, NULL);

  00030	6a 00		 push	 0
  00032	33 d2		 xor	 edx, edx
  00034	e8 00 00 00 00	 call	 _gz_error
  00039	83 c4 04	 add	 esp, 4
$LN4@gzclearerr:

; 556  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv79 = 8						; size = 4
_msg$ = 8						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = edx

; 568  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b f2		 mov	 esi, edx

; 569  :     /* free previously allocated message and clear */
; 570  :     if (state->msg != NULL) {

  0000a	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  0000d	85 c0		 test	 eax, eax
  0000f	74 16		 je	 SHORT $LN6@gz_error

; 571  :         if (state->err != Z_MEM_ERROR)

  00011	83 7f 5c fc	 cmp	 DWORD PTR [edi+92], -4	; fffffffcH
  00015	74 09		 je	 SHORT $LN5@gz_error

; 572  :             free(state->msg);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
$LN5@gz_error:

; 573  :         state->msg = NULL;

  00020	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
$LN6@gz_error:

; 574  :     }
; 575  : 
; 576  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 577  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00027	85 f6		 test	 esi, esi
  00029	74 0b		 je	 SHORT $LN4@gz_error
  0002b	83 fe fb	 cmp	 esi, -5			; fffffffbH
  0002e	74 06		 je	 SHORT $LN4@gz_error

; 578  :         state->x.have = 0;

  00030	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN4@gz_error:

; 579  : 
; 580  :     /* set error code, and if no message, then done */
; 581  :     state->err = err;
; 582  :     if (msg == NULL)

  00036	8b 5d 08	 mov	 ebx, DWORD PTR _msg$[ebp]
  00039	89 77 5c	 mov	 DWORD PTR [edi+92], esi
  0003c	85 db		 test	 ebx, ebx
  0003e	0f 84 b3 00 00
	00		 je	 $LN7@gz_error

; 583  :         return;
; 584  : 
; 585  :     /* for an out of memory error, save as static string */
; 586  :     if (err == Z_MEM_ERROR) {

  00044	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00047	75 08		 jne	 SHORT $LN2@gz_error

; 587  :         state->msg = (char *)msg;

  00049	89 5f 60	 mov	 DWORD PTR [edi+96], ebx
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx

; 600  :     return;
; 601  : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
$LN2@gz_error:

; 588  :         return;
; 589  :     }
; 590  : 
; 591  :     /* construct error message with path */
; 592  :     if ((state->msg = malloc(strlen(state->path) + strlen(msg) + 3)) == NULL) {

  00051	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00054	8b ce		 mov	 ecx, esi
  00056	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00059	8d a4 24 00 00
	00 00		 npad	 7
$LL13@gz_error:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL13@gz_error
  00067	2b ca		 sub	 ecx, edx
  00069	8b d3		 mov	 edx, ebx
  0006b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0006e	89 45 08	 mov	 DWORD PTR tv79[ebp], eax
$LL14@gz_error:
  00071	8a 02		 mov	 al, BYTE PTR [edx]
  00073	42		 inc	 edx
  00074	84 c0		 test	 al, al
  00076	75 f9		 jne	 SHORT $LL14@gz_error
  00078	2b 55 08	 sub	 edx, DWORD PTR tv79[ebp]
  0007b	8d 41 03	 lea	 eax, DWORD PTR [ecx+3]
  0007e	03 c2		 add	 eax, edx
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _malloc
  00086	8b c8		 mov	 ecx, eax
  00088	83 c4 04	 add	 esp, 4
  0008b	89 4f 60	 mov	 DWORD PTR [edi+96], ecx
  0008e	85 c9		 test	 ecx, ecx
  00090	75 13		 jne	 SHORT $LL1@gz_error

; 593  :         state->err = Z_MEM_ERROR;

  00092	c7 47 5c fc ff
	ff ff		 mov	 DWORD PTR [edi+92], -4	; fffffffcH

; 594  :         state->msg = (char *)"out of memory";

  00099	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 600  :     return;
; 601  : }

  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LL1@gz_error:

; 595  :         return;
; 596  :     }
; 597  :     strcpy(state->msg, state->path);

  000a5	8a 06		 mov	 al, BYTE PTR [esi]
  000a7	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000aa	88 01		 mov	 BYTE PTR [ecx], al
  000ac	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000af	84 c0		 test	 al, al
  000b1	75 f2		 jne	 SHORT $LL1@gz_error

; 598  :     strcat(state->msg, ": ");

  000b3	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
  000b6	49		 dec	 ecx
$LL15@gz_error:
  000b7	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  000ba	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000bd	84 c0		 test	 al, al
  000bf	75 f6		 jne	 SHORT $LL15@gz_error
  000c1	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_02LMMGGCAJ@?3?5?$AA@

; 599  :     strcat(state->msg, msg);

  000c7	8b f3		 mov	 esi, ebx
  000c9	66 89 01	 mov	 WORD PTR [ecx], ax
  000cc	a0 02 00 00 00	 mov	 al, BYTE PTR ??_C@_02LMMGGCAJ@?3?5?$AA@+2
  000d1	88 41 02	 mov	 BYTE PTR [ecx+2], al
$LL16@gz_error:
  000d4	8a 03		 mov	 al, BYTE PTR [ebx]
  000d6	43		 inc	 ebx
  000d7	84 c0		 test	 al, al
  000d9	75 f9		 jne	 SHORT $LL16@gz_error
  000db	8b 7f 60	 mov	 edi, DWORD PTR [edi+96]
  000de	2b de		 sub	 ebx, esi
  000e0	4f		 dec	 edi
$LL17@gz_error:
  000e1	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000e4	47		 inc	 edi
  000e5	84 c0		 test	 al, al
  000e7	75 f8		 jne	 SHORT $LL17@gz_error
  000e9	8b cb		 mov	 ecx, ebx
  000eb	c1 e9 02	 shr	 ecx, 2
  000ee	f3 a5		 rep movsd
  000f0	8b cb		 mov	 ecx, ebx
  000f2	83 e1 03	 and	 ecx, 3
  000f5	f3 a4		 rep movsb
$LN7@gz_error:
  000f7	5f		 pop	 edi
  000f8	5e		 pop	 esi
  000f9	5b		 pop	 ebx

; 600  :     return;
; 601  : }

  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
END
