; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	D:\Workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\ZLib\gzwrite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ ; `string'
EXTRN	_write:PROC
EXTRN	_vsnprintf:PROC
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ DB 'internal er'
	DB	'ror: deflate stream corrupt', 00H		; `string'
PUBLIC	_gzsetparams@12
PUBLIC	_gzflush@8
PUBLIC	_gzprintf
PUBLIC	_gzputs@8
PUBLIC	_gzputc@8
PUBLIC	_gzwrite@12
PUBLIC	_gzclose_w@4
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzclose_w@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w@4 PROC					; COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 530  :     int ret = Z_OK;
; 531  :     gz_statep state;
; 532  : 
; 533  :     /* get internal structure */
; 534  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	85 f6		 test	 esi, esi
  0000c	75 0b		 jne	 SHORT $LN8@gzclose_w
$LN11@gzclose_w:
  0000e	5f		 pop	 edi

; 535  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00014	5e		 pop	 esi

; 565  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN8@gzclose_w:

; 536  :     state = (gz_statep)file;
; 537  : 
; 538  :     /* check that we're writing */
; 539  :     if (state->mode != GZ_WRITE)

  00019	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00020	75 ec		 jne	 SHORT $LN11@gzclose_w

; 540  :         return Z_STREAM_ERROR;
; 541  : 
; 542  :     /* check for seek request */
; 543  :     if (state->seek) {

  00022	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  00025	74 1b		 je	 SHORT $LN5@gzclose_w

; 544  :         state->seek = 0;
; 545  :         if (gz_zero(state, state->skip) == -1)

  00027	ff 76 54	 push	 DWORD PTR [esi+84]
  0002a	8b ce		 mov	 ecx, esi
  0002c	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  0002f	ff 76 50	 push	 DWORD PTR [esi+80]
  00032	e8 00 00 00 00	 call	 _gz_zero
  00037	83 c4 08	 add	 esp, 8
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	75 03		 jne	 SHORT $LN5@gzclose_w

; 546  :             ret = state->err;

  0003f	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN5@gzclose_w:

; 547  :     }
; 548  : 
; 549  :     /* flush, free memory, and close file */
; 550  :     if (state->size) {

  00042	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00046	74 39		 je	 SHORT $LN4@gzclose_w

; 551  :         if (gz_comp(state, Z_FINISH) == -1)

  00048	ba 04 00 00 00	 mov	 edx, 4
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 _gz_comp
  00054	83 f8 ff	 cmp	 eax, -1
  00057	75 03		 jne	 SHORT $LN3@gzclose_w

; 552  :             ret = state->err;

  00059	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN3@gzclose_w:

; 553  :         if (!state->direct) {

  0005c	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00060	75 14		 jne	 SHORT $LN2@gzclose_w

; 554  :             (void)deflateEnd(&(state->strm));

  00062	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _deflateEnd@4

; 555  :             free(state->out);

  0006b	ff 76 28	 push	 DWORD PTR [esi+40]
  0006e	e8 00 00 00 00	 call	 _free
  00073	83 c4 04	 add	 esp, 4
$LN2@gzclose_w:

; 556  :         }
; 557  :         free(state->in);

  00076	ff 76 24	 push	 DWORD PTR [esi+36]
  00079	e8 00 00 00 00	 call	 _free
  0007e	83 c4 04	 add	 esp, 4
$LN4@gzclose_w:

; 558  :     }
; 559  :     gz_error(state, Z_OK, NULL);

  00081	6a 00		 push	 0
  00083	33 d2		 xor	 edx, edx
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 _gz_error

; 560  :     free(state->path);

  0008c	ff 76 18	 push	 DWORD PTR [esi+24]
  0008f	e8 00 00 00 00	 call	 _free

; 561  :     if (close(state->fd) == -1)

  00094	ff 76 14	 push	 DWORD PTR [esi+20]
  00097	e8 00 00 00 00	 call	 _close
  0009c	83 c9 ff	 or	 ecx, -1
  0009f	3b c1		 cmp	 eax, ecx

; 562  :         ret = Z_ERRNO;
; 563  :     free(state);

  000a1	56		 push	 esi
  000a2	0f 44 f9	 cmove	 edi, ecx
  000a5	e8 00 00 00 00	 call	 _free
  000aa	83 c4 10	 add	 esp, 16			; 00000010H

; 564  :     return ret;

  000ad	8b c7		 mov	 eax, edi
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi

; 565  : }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
_gzclose_w@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gz_init
_TEXT	SEGMENT
_gz_init PROC						; COMDAT
; _state$ = ecx

; 17   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 18   :     int ret;
; 19   :     z_streamp strm = &(state->strm);
; 20   : 
; 21   :     /* allocate input buffer */
; 22   :     state->in = malloc(state->want);

  00005	ff 76 20	 push	 DWORD PTR [esi+32]
  00008	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0000b	e8 00 00 00 00	 call	 _malloc
  00010	8b d8		 mov	 ebx, eax
  00012	83 c4 04	 add	 esp, 4
  00015	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 23   :     if (state->in == NULL) {

  00018	85 db		 test	 ebx, ebx
  0001a	75 19		 jne	 SHORT $LN5@gz_init

; 24   :         gz_error(state, Z_MEM_ERROR, "out of memory");

  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  00021	8d 50 fc	 lea	 edx, DWORD PTR [eax-4]
  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 _gz_error
  0002b	83 c4 04	 add	 esp, 4

; 25   :         return -1;

  0002e	83 c8 ff	 or	 eax, -1
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 62   : }

  00034	c3		 ret	 0
$LN5@gz_init:

; 26   :     }
; 27   : 
; 28   :     /* only need output buffer and deflate state if compressing */
; 29   :     if (!state->direct) {

  00035	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00039	0f 85 90 00 00
	00		 jne	 $LN2@gz_init

; 30   :         /* allocate output buffer */
; 31   :         state->out = malloc(state->want);

  0003f	ff 76 20	 push	 DWORD PTR [esi+32]
  00042	e8 00 00 00 00	 call	 _malloc
  00047	83 c4 04	 add	 esp, 4
  0004a	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 32   :         if (state->out == NULL) {

  0004d	85 c0		 test	 eax, eax
  0004f	75 21		 jne	 SHORT $LN3@gz_init

; 33   :             free(state->in);

  00051	53		 push	 ebx
  00052	e8 00 00 00 00	 call	 _free

; 34   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  0005c	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 _gz_error
  00068	83 c4 08	 add	 esp, 8

; 35   :             return -1;

  0006b	83 c8 ff	 or	 eax, -1
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 62   : }

  00071	c3		 ret	 0
$LN3@gz_init:

; 36   :         }
; 37   : 
; 38   :         /* allocate deflate memory, set up for gzip compression */
; 39   :         strm->zalloc = Z_NULL;
; 40   :         strm->zfree = Z_NULL;
; 41   :         strm->opaque = Z_NULL;
; 42   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,
; 43   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);

  00072	6a 38		 push	 56			; 00000038H
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_05HBMOAMF@1?42?47?$AA@
  00079	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00080	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  00087	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  0008e	ff 76 4c	 push	 DWORD PTR [esi+76]
  00091	6a 08		 push	 8
  00093	6a 1f		 push	 31			; 0000001fH
  00095	6a 08		 push	 8
  00097	ff 76 48	 push	 DWORD PTR [esi+72]
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 _deflateInit2_@32

; 44   :         if (ret != Z_OK) {

  000a0	85 c0		 test	 eax, eax
  000a2	74 2b		 je	 SHORT $LN2@gz_init

; 45   :             free(state->out);

  000a4	ff 76 28	 push	 DWORD PTR [esi+40]
  000a7	e8 00 00 00 00	 call	 _free

; 46   :             free(state->in);

  000ac	ff 76 24	 push	 DWORD PTR [esi+36]
  000af	e8 00 00 00 00	 call	 _free

; 47   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000b9	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 _gz_error
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   :             return -1;

  000c8	83 c8 ff	 or	 eax, -1
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx

; 62   : }

  000ce	c3		 ret	 0
$LN2@gz_init:

; 49   :         }
; 50   :     }
; 51   : 
; 52   :     /* mark state as initialized */
; 53   :     state->size = state->want;
; 54   : 
; 55   :     /* initialize write buffer if compressing */
; 56   :     if (!state->direct) {

  000cf	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  000d3	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000d6	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000d9	75 0c		 jne	 SHORT $LN1@gz_init

; 57   :         strm->avail_out = state->size;

  000db	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 58   :         strm->next_out = state->out;

  000de	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000e1	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 59   :         state->x.next = strm->next_out;

  000e4	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@gz_init:

; 60   :     }
; 61   :     return 0;

  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	33 c0		 xor	 eax, eax
  000eb	5b		 pop	 ebx

; 62   : }

  000ec	c3		 ret	 0
_gz_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gz_comp
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_gz_comp PROC						; COMDAT
; _state$ = ecx
; _flush$ = edx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 55 fc	 mov	 DWORD PTR _flush$1$[ebp], edx

; 74   :     int ret, got;
; 75   :     unsigned have;
; 76   :     z_streamp strm = &(state->strm);
; 77   : 
; 78   :     /* allocate memory if this is the first time through */
; 79   :     if (state->size == 0 && gz_init(state) == -1)

  0000b	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  0000f	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  00012	75 0d		 jne	 SHORT $LN15@gz_comp
  00014	e8 00 00 00 00	 call	 _gz_init
  00019	83 f8 ff	 cmp	 eax, -1
  0001c	74 4b		 je	 SHORT $LN26@gz_comp
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
$LN15@gz_comp:

; 80   :         return -1;
; 81   : 
; 82   :     /* write directly if requested */
; 83   :     if (state->direct) {

  00021	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00025	74 4b		 je	 SHORT $LN14@gz_comp

; 84   :         got = write(state->fd, strm->next_in, strm->avail_in);

  00027	ff 76 04	 push	 DWORD PTR [esi+4]
  0002a	ff 36		 push	 DWORD PTR [esi]
  0002c	ff 77 14	 push	 DWORD PTR [edi+20]
  0002f	e8 00 00 00 00	 call	 _write
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 85   :         if (got < 0 || (unsigned)got != strm->avail_in) {

  00037	85 c0		 test	 eax, eax
  00039	78 14		 js	 SHORT $LN12@gz_comp
  0003b	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003e	75 0f		 jne	 SHORT $LN12@gz_comp

; 88   :         }
; 89   :         strm->avail_in = 0;

  00040	5f		 pop	 edi
  00041	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 90   :         return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	5e		 pop	 esi

; 130  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN12@gz_comp:

; 86   :             gz_error(state, Z_ERRNO, zstrerror());

  0004f	e8 00 00 00 00	 call	 __errno
  00054	ff 30		 push	 DWORD PTR [eax]
  00056	e8 00 00 00 00	 call	 _strerror
  0005b	50		 push	 eax
  0005c	83 ca ff	 or	 edx, -1
  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 _gz_error
  00066	83 c4 08	 add	 esp, 8
$LN26@gz_comp:

; 87   :             return -1;

  00069	5f		 pop	 edi
  0006a	83 c8 ff	 or	 eax, -1
  0006d	5e		 pop	 esi

; 130  : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
$LN14@gz_comp:

; 91   :     }
; 92   : 
; 93   :     /* run deflate() on provided input until it produces no more output */
; 94   :     ret = Z_OK;

  00072	33 c0		 xor	 eax, eax
  00074	53		 push	 ebx
$LL11@gz_comp:

; 95   :     do {
; 96   :         /* write out current buffer contents if full, or if flushing, but if
; 97   :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 98   :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&
; 99   :             (flush != Z_FINISH || ret == Z_STREAM_END))) {

  00075	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00079	74 0e		 je	 SHORT $LN6@gz_comp
  0007b	85 d2		 test	 edx, edx
  0007d	74 44		 je	 SHORT $LN8@gz_comp
  0007f	83 fa 04	 cmp	 edx, 4
  00082	75 05		 jne	 SHORT $LN6@gz_comp
  00084	83 f8 01	 cmp	 eax, 1
  00087	75 3a		 jne	 SHORT $LN8@gz_comp
$LN6@gz_comp:

; 100  :             have = (unsigned)(strm->next_out - state->x.next);

  00089	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0008c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0008f	2b d8		 sub	 ebx, eax

; 101  :             if (have && ((got = write(state->fd, state->x.next, have)) < 0 ||
; 102  :                          (unsigned)got != have)) {

  00091	74 15		 je	 SHORT $LN5@gz_comp
  00093	53		 push	 ebx
  00094	50		 push	 eax
  00095	ff 77 14	 push	 DWORD PTR [edi+20]
  00098	e8 00 00 00 00	 call	 _write
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	85 c0		 test	 eax, eax
  000a2	78 38		 js	 SHORT $LN4@gz_comp
  000a4	3b c3		 cmp	 eax, ebx
  000a6	75 34		 jne	 SHORT $LN4@gz_comp
$LN5@gz_comp:

; 104  :                 return -1;
; 105  :             }
; 106  :             if (strm->avail_out == 0) {

  000a8	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000ac	75 0c		 jne	 SHORT $LN3@gz_comp

; 107  :                 strm->avail_out = state->size;

  000ae	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000b1	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 108  :                 strm->next_out = state->out;

  000b4	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000b7	89 46 0c	 mov	 DWORD PTR [esi+12], eax
$LN3@gz_comp:

; 109  :             }
; 110  :             state->x.next = strm->next_out;

  000ba	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000bd	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
  000c0	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN8@gz_comp:

; 111  :         }
; 112  : 
; 113  :         /* compress */
; 114  :         have = strm->avail_out;

  000c3	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 115  :         ret = deflate(strm, flush);

  000c6	52		 push	 edx
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 _deflate@8

; 116  :         if (ret == Z_STREAM_ERROR) {

  000cd	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  000d0	74 43		 je	 SHORT $LN20@gz_comp

; 120  :         }
; 121  :         have -= strm->avail_out;

  000d2	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 122  :     } while (have);

  000d5	74 29		 je	 SHORT $LN19@gz_comp
  000d7	8b 55 fc	 mov	 edx, DWORD PTR _flush$1$[ebp]
  000da	eb 99		 jmp	 SHORT $LL11@gz_comp
$LN4@gz_comp:

; 103  :                 gz_error(state, Z_ERRNO, zstrerror());

  000dc	e8 00 00 00 00	 call	 __errno
  000e1	ff 30		 push	 DWORD PTR [eax]
  000e3	e8 00 00 00 00	 call	 _strerror
  000e8	50		 push	 eax
  000e9	83 ca ff	 or	 edx, -1
  000ec	8b cf		 mov	 ecx, edi
  000ee	e8 00 00 00 00	 call	 _gz_error
  000f3	83 c4 08	 add	 esp, 8

; 119  :             return -1;

  000f6	83 c8 ff	 or	 eax, -1
  000f9	5b		 pop	 ebx
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi

; 130  : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
$LN19@gz_comp:

; 123  : 
; 124  :     /* if that completed a deflate stream, allow another to start */
; 125  :     if (flush == Z_FINISH)

  00100	83 7d fc 04	 cmp	 DWORD PTR _flush$1$[ebp], 4
  00104	75 06		 jne	 SHORT $LN1@gz_comp

; 126  :         deflateReset(strm);

  00106	56		 push	 esi
  00107	e8 00 00 00 00	 call	 _deflateReset@4
$LN1@gz_comp:

; 127  : 
; 128  :     /* all done, no errors */
; 129  :     return 0;

  0010c	5b		 pop	 ebx
  0010d	5f		 pop	 edi
  0010e	33 c0		 xor	 eax, eax
  00110	5e		 pop	 esi

; 130  : }

  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
$LN20@gz_comp:

; 117  :             gz_error(state, Z_STREAM_ERROR,
; 118  :                       "internal error: deflate stream corrupt");

  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
  0011a	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0011f	8b cf		 mov	 ecx, edi
  00121	e8 00 00 00 00	 call	 _gz_error
  00126	83 c4 04	 add	 esp, 4

; 119  :             return -1;

  00129	83 c8 ff	 or	 eax, -1
  0012c	5b		 pop	 ebx
  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi

; 130  : }

  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_gz_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gz_zero
_TEXT	SEGMENT
_first$1$ = -8						; size = 4
_len$2$ = -4						; size = 4
_len$ = 8						; size = 8
_gz_zero PROC						; COMDAT
; _state$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 137  :     int first;
; 138  :     unsigned n;
; 139  :     z_streamp strm = &(state->strm);
; 140  : 
; 141  :     /* consume whatever's left in the input buffer */
; 142  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00009	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0000d	74 13		 je	 SHORT $LN5@gz_zero
  0000f	33 d2		 xor	 edx, edx
  00011	e8 00 00 00 00	 call	 _gz_comp
  00016	83 f8 ff	 cmp	 eax, -1
  00019	75 07		 jne	 SHORT $LN5@gz_zero

; 143  :         return -1;

  0001b	0b c0		 or	 eax, eax
  0001d	5e		 pop	 esi

; 162  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN5@gz_zero:

; 144  : 
; 145  :     /* compress len zeros (len guaranteed > 0) */
; 146  :     first = 1;
; 147  :     while (len) {

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp+4]
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	53		 push	 ebx
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0002e	8b c3		 mov	 eax, ebx
  00030	0b c1		 or	 eax, ecx
  00032	89 55 f8	 mov	 DWORD PTR _first$1$[ebp], edx
  00035	57		 push	 edi
  00036	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  00039	74 61		 je	 SHORT $LN3@gz_zero
  0003b	eb 03 8d 49 00	 npad	 5
$LL4@gz_zero:

; 148  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?
; 149  :             (unsigned)len : state->size;

  00040	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00043	33 c0		 xor	 eax, eax
  00045	3b c1		 cmp	 eax, ecx
  00047	7f 06		 jg	 SHORT $LN8@gz_zero
  00049	7c 06		 jl	 SHORT $LN9@gz_zero
  0004b	3b fb		 cmp	 edi, ebx
  0004d	76 02		 jbe	 SHORT $LN9@gz_zero
$LN8@gz_zero:
  0004f	8b fb		 mov	 edi, ebx
$LN9@gz_zero:

; 150  :         if (first) {

  00051	85 d2		 test	 edx, edx
  00053	74 15		 je	 SHORT $LN2@gz_zero

; 151  :             memset(state->in, 0, n);

  00055	57		 push	 edi
  00056	6a 00		 push	 0
  00058	ff 76 24	 push	 DWORD PTR [esi+36]
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 152  :             first = 0;

  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _first$1$[ebp], 0
$LN2@gz_zero:

; 153  :         }
; 154  :         strm->avail_in = n;

  0006a	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 155  :         strm->next_in = state->in;
; 156  :         state->x.pos += n;
; 157  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  0006d	8b ce		 mov	 ecx, esi
  0006f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00072	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00075	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00078	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  0007c	33 d2		 xor	 edx, edx
  0007e	e8 00 00 00 00	 call	 _gz_comp
  00083	83 f8 ff	 cmp	 eax, -1
  00086	74 1d		 je	 SHORT $LN11@gz_zero

; 159  :         len -= n;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _len$2$[ebp]
  0008b	2b df		 sub	 ebx, edi
  0008d	8b 55 f8	 mov	 edx, DWORD PTR _first$1$[ebp]
  00090	8b c3		 mov	 eax, ebx
  00092	83 d9 00	 sbb	 ecx, 0
  00095	0b c1		 or	 eax, ecx
  00097	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0009a	75 a4		 jne	 SHORT $LL4@gz_zero
$LN3@gz_zero:
  0009c	5f		 pop	 edi
  0009d	5b		 pop	 ebx

; 160  :     }
; 161  :     return 0;

  0009e	33 c0		 xor	 eax, eax
  000a0	5e		 pop	 esi

; 162  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN11@gz_zero:
  000a5	5f		 pop	 edi
  000a6	5b		 pop	 ebx

; 158  :             return -1;

  000a7	83 c8 ff	 or	 eax, -1
  000aa	5e		 pop	 esi

; 162  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_gz_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzwrite@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$1$ = 12						; size = 4
_buf$ = 12						; size = 4
_put$1$ = 16						; size = 4
_len$ = 16						; size = 4
_gzwrite@12 PROC					; COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 170  :     unsigned put = len;

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  00007	56		 push	 esi

; 171  :     unsigned n;
; 172  :     gz_statep state;
; 173  :     z_streamp strm;
; 174  : 
; 175  :     /* get internal structure */
; 176  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	89 5d 10	 mov	 DWORD PTR _put$1$[ebp], ebx
  0000e	85 f6		 test	 esi, esi
  00010	74 27		 je	 SHORT $LN29@gzwrite

; 177  :         return 0;
; 178  :     state = (gz_statep)file;
; 179  :     strm = &(state->strm);
; 180  : 
; 181  :     /* check that we're writing and that there's no error */
; 182  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00012	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00019	75 1e		 jne	 SHORT $LN29@gzwrite
  0001b	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  0001f	75 18		 jne	 SHORT $LN29@gzwrite

; 183  :         return 0;
; 184  : 
; 185  :     /* since an int is returned, make sure len fits in one, otherwise return
; 186  :        with an error (this avoids the flaw in the interface) */
; 187  :     if ((int)len < 0) {

  00021	85 db		 test	 ebx, ebx
  00023	79 1c		 jns	 SHORT $LN27@gzwrite

; 188  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
  0002a	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 _gz_error
  00036	83 c4 04	 add	 esp, 4
$LN29@gzwrite:

; 189  :         return 0;

  00039	5e		 pop	 esi
  0003a	33 c0		 xor	 eax, eax
  0003c	5b		 pop	 ebx

; 240  : }

  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
$LN27@gzwrite:

; 190  :     }
; 191  : 
; 192  :     /* if len is zero, avoid unnecessary operations */
; 193  :     if (len == 0)

  00041	74 f6		 je	 SHORT $LN29@gzwrite

; 194  :         return 0;
; 195  : 
; 196  :     /* allocate memory if this is the first time through */
; 197  :     if (state->size == 0 && gz_init(state) == -1)

  00043	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00047	75 0c		 jne	 SHORT $LN13@gzwrite
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 _gz_init
  00050	83 f8 ff	 cmp	 eax, -1
  00053	74 e4		 je	 SHORT $LN29@gzwrite
$LN13@gzwrite:

; 198  :         return 0;
; 199  : 
; 200  :     /* check for seek request */
; 201  :     if (state->seek) {

  00055	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00059	74 1c		 je	 SHORT $LN11@gzwrite

; 202  :         state->seek = 0;
; 203  :         if (gz_zero(state, state->skip) == -1)

  0005b	ff 76 54	 push	 DWORD PTR [esi+84]
  0005e	8b ce		 mov	 ecx, esi
  00060	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00067	ff 76 50	 push	 DWORD PTR [esi+80]
  0006a	e8 00 00 00 00	 call	 _gz_zero
  0006f	83 c4 08	 add	 esp, 8
  00072	83 f8 ff	 cmp	 eax, -1
  00075	74 c2		 je	 SHORT $LN29@gzwrite
$LN11@gzwrite:
  00077	57		 push	 edi

; 204  :             return 0;
; 205  :     }
; 206  : 
; 207  :     /* for small len, copy to input buffer, otherwise compress directly */
; 208  :     if (len < state->size) {

  00078	3b 5e 1c	 cmp	 ebx, DWORD PTR [esi+28]
  0007b	73 58		 jae	 SHORT $LN10@gzwrite
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00080	89 55 0c	 mov	 DWORD PTR _buf$1$[ebp], edx
$LL9@gzwrite:

; 209  :         /* copy to input buffer, compress when full */
; 210  :         do {
; 211  :             if (strm->avail_in == 0)

  00083	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00086	85 c9		 test	 ecx, ecx
  00088	75 06		 jne	 SHORT $LN6@gzwrite

; 212  :                 strm->next_in = state->in;

  0008a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0008d	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN6@gzwrite:

; 213  :             n = state->size - strm->avail_in;

  00090	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]

; 214  :             if (n > len)
; 215  :                 n = len;
; 216  :             memcpy(strm->next_in + strm->avail_in, buf, n);

  00093	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00096	2b f9		 sub	 edi, ecx
  00098	3b fb		 cmp	 edi, ebx
  0009a	0f 47 fb	 cmova	 edi, ebx
  0009d	03 c1		 add	 eax, ecx
  0009f	57		 push	 edi
  000a0	52		 push	 edx
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _memcpy

; 217  :             strm->avail_in += n;

  000a7	01 7e 68	 add	 DWORD PTR [esi+104], edi
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 218  :             state->x.pos += n;

  000ad	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000b0	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 219  :             buf = (char *)buf + n;

  000b4	01 7d 0c	 add	 DWORD PTR _buf$1$[ebp], edi

; 220  :             len -= n;

  000b7	2b df		 sub	 ebx, edi

; 221  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  000b9	74 4c		 je	 SHORT $LN1@gzwrite
  000bb	33 d2		 xor	 edx, edx
  000bd	8b ce		 mov	 ecx, esi
  000bf	e8 00 00 00 00	 call	 _gz_comp
  000c4	8b 55 0c	 mov	 edx, DWORD PTR _buf$1$[ebp]
  000c7	83 f8 ff	 cmp	 eax, -1
  000ca	75 b7		 jne	 SHORT $LL9@gzwrite
$LN28@gzwrite:
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi

; 222  :                 return 0;

  000ce	33 c0		 xor	 eax, eax
  000d0	5b		 pop	 ebx

; 240  : }

  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
$LN10@gzwrite:

; 223  :         } while (len);
; 224  :     }
; 225  :     else {
; 226  :         /* consume whatever's left in the input buffer */
; 227  :         if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000d5	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  000d9	74 0e		 je	 SHORT $LN2@gzwrite
  000db	33 d2		 xor	 edx, edx
  000dd	8b ce		 mov	 ecx, esi
  000df	e8 00 00 00 00	 call	 _gz_comp
  000e4	83 f8 ff	 cmp	 eax, -1
  000e7	74 e3		 je	 SHORT $LN28@gzwrite
$LN2@gzwrite:

; 228  :             return 0;
; 229  : 
; 230  :         /* directly compress user buffer to file */
; 231  :         strm->avail_in = len;
; 232  :         strm->next_in = (voidp)buf;

  000e9	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]

; 233  :         state->x.pos += len;
; 234  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  000ec	8b ce		 mov	 ecx, esi
  000ee	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  000f1	89 46 64	 mov	 DWORD PTR [esi+100], eax
  000f4	01 5e 08	 add	 DWORD PTR [esi+8], ebx
  000f7	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  000fb	33 d2		 xor	 edx, edx
  000fd	e8 00 00 00 00	 call	 _gz_comp
  00102	83 f8 ff	 cmp	 eax, -1
  00105	74 c5		 je	 SHORT $LN28@gzwrite
$LN1@gzwrite:

; 235  :             return 0;
; 236  :     }
; 237  : 
; 238  :     /* input was all buffered or compressed (put will fit in int) */
; 239  :     return (int)put;

  00107	8b 45 10	 mov	 eax, DWORD PTR _put$1$[ebp]
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx

; 240  : }

  0010d	5d		 pop	 ebp
  0010e	c2 0c 00	 ret	 12			; 0000000cH
_gzwrite@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzputc@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_c$ = 12						; size = 4
_gzputc@8 PROC						; COMDAT

; 246  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 247  :     unsigned char buf[1];
; 248  :     gz_statep state;
; 249  :     z_streamp strm;
; 250  : 
; 251  :     /* get internal structure */
; 252  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN8@gzputc
$LN12@gzputc:

; 253  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 283  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN8@gzputc:

; 254  :     state = (gz_statep)file;
; 255  :     strm = &(state->strm);
; 256  : 
; 257  :     /* check that we're writing and that there's no error */
; 258  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00013	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001a	75 ef		 jne	 SHORT $LN12@gzputc
  0001c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00020	75 e9		 jne	 SHORT $LN12@gzputc

; 259  :         return -1;
; 260  : 
; 261  :     /* check for seek request */
; 262  :     if (state->seek) {

  00022	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00026	74 1c		 je	 SHORT $LN4@gzputc

; 263  :         state->seek = 0;
; 264  :         if (gz_zero(state, state->skip) == -1)

  00028	ff 76 54	 push	 DWORD PTR [esi+84]
  0002b	8b ce		 mov	 ecx, esi
  0002d	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00034	ff 76 50	 push	 DWORD PTR [esi+80]
  00037	e8 00 00 00 00	 call	 _gz_zero
  0003c	83 c4 08	 add	 esp, 8
  0003f	83 f8 ff	 cmp	 eax, -1
  00042	74 c7		 je	 SHORT $LN12@gzputc
$LN4@gzputc:

; 265  :             return -1;
; 266  :     }
; 267  : 
; 268  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 269  :        initialized) */
; 270  :     if (strm->avail_in < state->size) {

  00044	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  00047	3b 56 1c	 cmp	 edx, DWORD PTR [esi+28]
  0004a	73 26		 jae	 SHORT $LN3@gzputc

; 271  :         if (strm->avail_in == 0)

  0004c	85 d2		 test	 edx, edx
  0004e	75 06		 jne	 SHORT $LN2@gzputc

; 272  :             strm->next_in = state->in;

  00050	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00053	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN2@gzputc:

; 273  :         strm->next_in[strm->avail_in++] = c;

  00056	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _c$[ebp]
  0005c	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0005f	ff 46 68	 inc	 DWORD PTR [esi+104]

; 274  :         state->x.pos++;

  00062	83 46 08 01	 add	 DWORD PTR [esi+8], 1

; 275  :         return c & 0xff;

  00066	0f b6 c1	 movzx	 eax, cl
  00069	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  0006d	5e		 pop	 esi

; 283  : }

  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
$LN3@gzputc:
  00072	53		 push	 ebx

; 276  :     }
; 277  : 
; 278  :     /* no room in buffer or not initialized, use gz_write() */
; 279  :     buf[0] = c;

  00073	8b 5d 0c	 mov	 ebx, DWORD PTR _c$[ebp]

; 280  :     if (gzwrite(file, buf, 1) != 1)

  00076	8d 45 0b	 lea	 eax, DWORD PTR _buf$[ebp]
  00079	6a 01		 push	 1
  0007b	50		 push	 eax
  0007c	56		 push	 esi
  0007d	88 5d 0b	 mov	 BYTE PTR _buf$[ebp], bl
  00080	e8 00 00 00 00	 call	 _gzwrite@12
  00085	83 f8 01	 cmp	 eax, 1
  00088	74 09		 je	 SHORT $LN1@gzputc

; 281  :         return -1;

  0008a	5b		 pop	 ebx
  0008b	83 c8 ff	 or	 eax, -1
  0008e	5e		 pop	 esi

; 283  : }

  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
$LN1@gzputc:

; 282  :     return c & 0xff;

  00093	0f b6 c3	 movzx	 eax, bl
  00096	5b		 pop	 ebx
  00097	5e		 pop	 esi

; 283  : }

  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
_gzputc@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzputs@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_gzputs@8 PROC						; COMDAT

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 290  :     int ret;
; 291  :     unsigned len;
; 292  : 
; 293  :     /* write string */
; 294  :     len = (unsigned)strlen(str);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0000c	8d 64 24 00	 npad	 4
$LL5@gzputs:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL5@gzputs
  00017	2b f2		 sub	 esi, edx

; 295  :     ret = gzwrite(file, str, len);

  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0001e	e8 00 00 00 00	 call	 _gzwrite@12

; 296  :     return ret == 0 && len != 0 ? -1 : ret;

  00023	85 c0		 test	 eax, eax
  00025	75 07		 jne	 SHORT $LN4@gzputs
  00027	85 f6		 test	 esi, esi
  00029	74 03		 je	 SHORT $LN4@gzputs
  0002b	83 c8 ff	 or	 eax, -1
$LN4@gzputs:
  0002e	5e		 pop	 esi

; 297  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
_gzputs@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC						; COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 305  :     int size, len;
; 306  :     gz_statep state;
; 307  :     z_streamp strm;
; 308  :     va_list va;
; 309  : 
; 310  :     /* get internal structure */
; 311  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 06		 jne	 SHORT $LN9@gzprintf

; 312  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 369  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN9@gzprintf:

; 313  :     state = (gz_statep)file;
; 314  :     strm = &(state->strm);
; 315  : 
; 316  :     /* check that we're writing and that there's no error */
; 317  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00011	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00018	75 18		 jne	 SHORT $LN14@gzprintf
  0001a	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  0001e	75 12		 jne	 SHORT $LN14@gzprintf

; 318  :         return 0;
; 319  : 
; 320  :     /* make sure we have some buffer space */
; 321  :     if (state->size == 0 && gz_init(state) == -1)

  00020	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00024	75 11		 jne	 SHORT $LN6@gzprintf
  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 _gz_init
  0002d	83 f8 ff	 cmp	 eax, -1
  00030	75 05		 jne	 SHORT $LN6@gzprintf
$LN14@gzprintf:

; 322  :         return 0;

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 369  : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN6@gzprintf:

; 323  : 
; 324  :     /* check for seek request */
; 325  :     if (state->seek) {

  00037	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003b	74 1c		 je	 SHORT $LN4@gzprintf

; 326  :         state->seek = 0;
; 327  :         if (gz_zero(state, state->skip) == -1)

  0003d	ff 76 54	 push	 DWORD PTR [esi+84]
  00040	8b ce		 mov	 ecx, esi
  00042	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00049	ff 76 50	 push	 DWORD PTR [esi+80]
  0004c	e8 00 00 00 00	 call	 _gz_zero
  00051	83 c4 08	 add	 esp, 8
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 d9		 je	 SHORT $LN14@gzprintf
$LN4@gzprintf:

; 328  :             return 0;
; 329  :     }
; 330  : 
; 331  :     /* consume whatever's left in the input buffer */
; 332  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00059	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0005d	74 0e		 je	 SHORT $LN3@gzprintf
  0005f	33 d2		 xor	 edx, edx
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 _gz_comp
  00068	83 f8 ff	 cmp	 eax, -1
  0006b	74 c5		 je	 SHORT $LN14@gzprintf
$LN3@gzprintf:

; 333  :         return 0;
; 334  : 
; 335  :     /* do the printf() into the input buffer, put length in len */
; 336  :     size = (int)(state->size);
; 337  :     state->in[size - 1] = 0;

  0006d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00070	53		 push	 ebx
  00071	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
  00074	57		 push	 edi
  00075	c6 44 03 ff 00	 mov	 BYTE PTR [ebx+eax-1], 0

; 338  :     va_start(va, format);
; 339  : #ifdef NO_vsnprintf
; 340  : #  ifdef HAS_vsprintf_void
; 341  :     (void)vsprintf((char *)(state->in), format, va);
; 342  :     va_end(va);
; 343  :     for (len = 0; len < size; len++)
; 344  :         if (state->in[len] == 0) break;
; 345  : #  else
; 346  :     len = vsprintf((char *)(state->in), format, va);
; 347  :     va_end(va);
; 348  : #  endif
; 349  : #else
; 350  : #  ifdef HAS_vsnprintf_void
; 351  :     (void)vsnprintf((char *)(state->in), size, format, va);
; 352  :     va_end(va);
; 353  :     len = strlen((char *)(state->in));
; 354  : #  else
; 355  :     len = vsnprintf((char *)(state->in), size, format, va);

  0007a	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  0007d	50		 push	 eax
  0007e	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  00081	53		 push	 ebx
  00082	ff 76 24	 push	 DWORD PTR [esi+36]
  00085	e8 00 00 00 00	 call	 _vsnprintf
  0008a	8b f8		 mov	 edi, eax
  0008c	83 c4 10	 add	 esp, 16			; 00000010H

; 356  :     va_end(va);
; 357  : #  endif
; 358  : #endif
; 359  : 
; 360  :     /* check that printf() results fit in buffer */
; 361  :     if (len <= 0 || len >= (int)size || state->in[size - 1] != 0)

  0008f	85 ff		 test	 edi, edi
  00091	7e 26		 jle	 SHORT $LN1@gzprintf
  00093	3b fb		 cmp	 edi, ebx
  00095	7d 22		 jge	 SHORT $LN1@gzprintf
  00097	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0009a	80 7c 0b ff 00	 cmp	 BYTE PTR [ebx+ecx-1], 0
  0009f	75 18		 jne	 SHORT $LN1@gzprintf

; 363  : 
; 364  :     /* update buffer and position, defer compression until needed */
; 365  :     strm->avail_in = (unsigned)len;
; 366  :     strm->next_in = state->in;

  000a1	8b c1		 mov	 eax, ecx
  000a3	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  000a6	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 367  :     state->x.pos += len;

  000a9	8b c7		 mov	 eax, edi
  000ab	99		 cdq
  000ac	01 46 08	 add	 DWORD PTR [esi+8], eax

; 368  :     return len;

  000af	8b c7		 mov	 eax, edi
  000b1	5f		 pop	 edi
  000b2	11 56 0c	 adc	 DWORD PTR [esi+12], edx
  000b5	5b		 pop	 ebx
  000b6	5e		 pop	 esi

; 369  : }

  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
$LN1@gzprintf:
  000b9	5f		 pop	 edi
  000ba	5b		 pop	 ebx

; 362  :         return 0;

  000bb	33 c0		 xor	 eax, eax
  000bd	5e		 pop	 esi

; 369  : }

  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzflush@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush@8 PROC						; COMDAT

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 457  :     gz_statep state;
; 458  : 
; 459  :     /* get internal structure */
; 460  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN7@gzflush
$LN10@gzflush:

; 461  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 482  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN7@gzflush:

; 462  :     state = (gz_statep)file;
; 463  : 
; 464  :     /* check that we're writing and that there's no error */
; 465  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00013	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001a	75 40		 jne	 SHORT $LN5@gzflush
  0001c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00020	75 3a		 jne	 SHORT $LN5@gzflush

; 467  : 
; 468  :     /* check flush parameter */
; 469  :     if (flush < 0 || flush > Z_FINISH)

  00022	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  00026	77 34		 ja	 SHORT $LN5@gzflush

; 470  :         return Z_STREAM_ERROR;
; 471  : 
; 472  :     /* check for seek request */
; 473  :     if (state->seek) {

  00028	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0002c	74 1c		 je	 SHORT $LN1@gzflush

; 474  :         state->seek = 0;
; 475  :         if (gz_zero(state, state->skip) == -1)

  0002e	ff 76 54	 push	 DWORD PTR [esi+84]
  00031	8b ce		 mov	 ecx, esi
  00033	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0003a	ff 76 50	 push	 DWORD PTR [esi+80]
  0003d	e8 00 00 00 00	 call	 _gz_zero
  00042	83 c4 08	 add	 esp, 8
  00045	83 f8 ff	 cmp	 eax, -1
  00048	74 c1		 je	 SHORT $LN10@gzflush
$LN1@gzflush:

; 476  :             return -1;
; 477  :     }
; 478  : 
; 479  :     /* compress remaining data with requested flush */
; 480  :     gz_comp(state, flush);

  0004a	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 _gz_comp

; 481  :     return state->err;

  00054	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00057	5e		 pop	 esi

; 482  : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN5@gzflush:

; 466  :         return Z_STREAM_ERROR;

  0005c	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00061	5e		 pop	 esi

; 482  : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
_gzflush@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\workspace\cocos2d-x-3.8.1\projects\mygame\libs\smartfox\zlib\gzwrite.c
;	COMDAT _gzsetparams@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams@12 PROC					; COMDAT

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 490  :     gz_statep state;
; 491  :     z_streamp strm;
; 492  : 
; 493  :     /* get internal structure */
; 494  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 0a		 jne	 SHORT $LN8@gzsetparam
$LN6@gzsetparam:

; 495  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5e		 pop	 esi

; 524  : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
$LN8@gzsetparam:

; 496  :     state = (gz_statep)file;
; 497  :     strm = &(state->strm);
; 498  : 
; 499  :     /* check that we're writing and that there's no error */
; 500  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0001f	75 ea		 jne	 SHORT $LN6@gzsetparam
  00021	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00025	75 e4		 jne	 SHORT $LN6@gzsetparam

; 501  :         return Z_STREAM_ERROR;
; 502  : 
; 503  :     /* if no change is requested, then do nothing */
; 504  :     if (level == state->level && strategy == state->strategy)

  00027	53		 push	 ebx
  00028	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 10	 mov	 edi, DWORD PTR _strategy$[ebp]
  0002f	3b 5e 48	 cmp	 ebx, DWORD PTR [esi+72]
  00032	75 05		 jne	 SHORT $LN5@gzsetparam
  00034	3b 7e 4c	 cmp	 edi, DWORD PTR [esi+76]
  00037	74 66		 je	 SHORT $LN15@gzsetparam
$LN5@gzsetparam:

; 505  :         return Z_OK;
; 506  : 
; 507  :     /* check for seek request */
; 508  :     if (state->seek) {

  00039	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003d	74 28		 je	 SHORT $LN3@gzsetparam

; 509  :         state->seek = 0;
; 510  :         if (gz_zero(state, state->skip) == -1)

  0003f	ff 76 54	 push	 DWORD PTR [esi+84]
  00042	8b ce		 mov	 ecx, esi
  00044	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004b	ff 76 50	 push	 DWORD PTR [esi+80]
  0004e	e8 00 00 00 00	 call	 _gz_zero
  00053	83 c4 08	 add	 esp, 8
  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 09		 jne	 SHORT $LN12@gzsetparam

; 511  :             return -1;

  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
  0005d	0b c0		 or	 eax, eax
  0005f	5e		 pop	 esi

; 524  : }

  00060	5d		 pop	 ebp
  00061	c2 0c 00	 ret	 12			; 0000000cH
$LN12@gzsetparam:
  00064	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN3@gzsetparam:

; 512  :     }
; 513  : 
; 514  :     /* change compression parameters for subsequent input */
; 515  :     if (state->size) {

  00067	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0006b	74 2c		 je	 SHORT $LN2@gzsetparam

; 516  :         /* flush previous input with previous parameters before changing */
; 517  :         if (strm->avail_in && gz_comp(state, Z_PARTIAL_FLUSH) == -1)

  0006d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00071	74 1e		 je	 SHORT $LN1@gzsetparam
  00073	ba 01 00 00 00	 mov	 edx, 1
  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 _gz_comp
  0007f	83 f8 ff	 cmp	 eax, -1
  00082	75 0a		 jne	 SHORT $LN11@gzsetparam

; 518  :             return state->err;

  00084	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx
  00089	5e		 pop	 esi

; 524  : }

  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
$LN11@gzsetparam:
  0008e	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN1@gzsetparam:

; 519  :         deflateParams(strm, level, strategy);

  00091	57		 push	 edi
  00092	53		 push	 ebx
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _deflateParams@12
$LN2@gzsetparam:

; 520  :     }
; 521  :     state->level = level;

  00099	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 522  :     state->strategy = strategy;

  0009c	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
$LN15@gzsetparam:

; 523  :     return Z_OK;

  0009f	5f		 pop	 edi
  000a0	5b		 pop	 ebx
  000a1	33 c0		 xor	 eax, eax
  000a3	5e		 pop	 esi

; 524  : }

  000a4	5d		 pop	 ebp
  000a5	c2 0c 00	 ret	 12			; 0000000cH
_gzsetparams@12 ENDP
_TEXT	ENDS
END
